<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Raker's Progress]]></title>
  <link href="http://beaugaines.github.com/atom.xml" rel="self"/>
  <link href="http://beaugaines.github.com/"/>
  <updated>2014-08-11T05:59:03-04:00</updated>
  <id>http://beaugaines.github.com/</id>
  <author>
    <name><![CDATA[Beau Gaines]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Image Upload with Attachinary]]></title>
    <link href="http://beaugaines.github.com/rails-image-upload-with-attachinary/"/>
    <updated>2013-12-17T11:37:00-05:00</updated>
    <id>http://beaugaines.github.com/rails-image-upload-with-attachinary</id>
    <content type="html"><![CDATA[<p>More appalling neglect of this blog in recent months, but I aim to change that in the new year.  That and the long-deferred blog restyle.  It will be done!</p>

<p>In the meantime, I decided I would write up my experience implementing <a href="https://github.com/assembler/attachinary">Attachinary</a> for image upload in Rails 4. <!-- more -->  I&#8217;ve used both <a href="https://github.com/thoughtbot/paperclip">Paperclip</a> and <a href="https://github.com/jnicklas/carrierwave">Carrierwave</a> in the past.  They both work great, but for my current project for the <a href="http://billionoysterproject.org">Billion Oyster Project</a> I wanted to try out <a href="http://cloudinary.com">Cloudinary</a>.  Looking through their documentation I found Attachinary, and it sounded great:  no need to change your models when you need to add an attachment, jQuery plugin for async file uploads with preview, and handling of both <code>has_one</code> and <code>has_many</code> use cases.  It&#8217;s also very simple to configure.  Happy days!</p>

<h4>Basic config</h4>

<p>The usual drill, add it to your gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;attachinary&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add to application.rb:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;attachinary/orm/active_record&quot;</span> <span class="c1">#  works with mongo too</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generate and run the necessessary migrations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="ss">attachinary</span><span class="p">:</span><span class="ss">install</span><span class="p">:</span><span class="n">migrations</span>
</span><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>Throw this in your routes file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mount</span> <span class="ss">Attachinary</span><span class="p">:</span><span class="ss">:Engine</span> <span class="o">=&gt;</span> <span class="s1">&#39;/attachinary&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then add to your application layout:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">cloudinary_js_config</span>
</span></code></pre></td></tr></table></div></figure>


<p>Done!</p>

<p>Oh, not quite, need to add the our associations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">has_attachments</span> <span class="ss">:photos</span><span class="p">,</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And a very simple form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">simple_form_for</span><span class="p">(</span><span class="vi">@post</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">input</span> <span class="ss">:title</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">input</span> <span class="ss">:caption</span><span class="p">,</span> <span class="ss">label</span><span class="p">:</span> <span class="s1">&#39;Comment&#39;</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">input</span> <span class="ss">:photos</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:attachinary</span>
</span></code></pre></td></tr></table></div></figure>


<p>The docs say if you don&#8217;t have the JQuery File Upload assets you need to run this rake task.  I had to run it, I&#8217;m guessing most people will:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">attachinary</span><span class="p">:</span><span class="n">fetch_fileupload</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then add the javascript payload to application.js - most of it to handle the upload to Cloudinary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">jquery</span><span class="o">.</span><span class="n">ui</span><span class="o">.</span><span class="n">widget</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">jquery</span><span class="o">.</span><span class="n">iframe</span><span class="o">-</span><span class="n">transport</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">jquery</span><span class="o">.</span><span class="n">fileupload</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">cloudinary</span><span class="o">/</span><span class="n">jquery</span><span class="o">.</span><span class="n">cloudinary</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">attachinary</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally add the javascript call to one of your coffee asset files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="s1">&#39;.attachinary-input&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">attachinary</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The jQuery plugin is unstyled, so we&#8217;ll be adding some styles here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="nc">.attachinary_container</span>
</span><span class='line'>  <span class="nd">+border-radius</span><span class="p">(</span><span class="mi">1</span><span class="kt">em</span><span class="p">)</span>
</span><span class='line'>  <span class="na">background-color</span><span class="o">:</span> <span class="mh">#eee</span>
</span><span class='line'>  <span class="na">padding</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span>
</span><span class='line'>  <span class="na">margin-bottom</span><span class="o">:</span> <span class="mi">1</span><span class="kt">em</span>
</span><span class='line'>  <span class="nt">ul</span>
</span><span class='line'>    <span class="nt">li</span>
</span><span class='line'>      <span class="na">list-style</span><span class="o">:</span> <span class="no">none</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mixins are one of my favorite features in SASS.  Here is the border-radius mixin used above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@mixin</span><span class="nf"> border-radius</span><span class="p">(</span><span class="nv">$radius</span><span class="p">)</span>
</span><span class='line'>  <span class="na">-webkit-border-radius</span><span class="o">:</span> <span class="nv">$radius</span>
</span><span class='line'>  <span class="na">-moz-border-radius</span><span class="o">:</span> <span class="nv">$radius</span>
</span><span class='line'>  <span class="na">-ms-border-radius</span><span class="o">:</span> <span class="nv">$radius</span>
</span><span class='line'>  <span class="na">border-radius</span><span class="o">:</span> <span class="nv">$radius</span>
</span></code></pre></td></tr></table></div></figure>


<p>Fetching the images from Cloudinary is easy-peasy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sass'><span class='line'><span class="k">@post</span><span class="nc">.photos.each</span> <span class="nt">do</span> <span class="o">|</span><span class="nt">photo</span><span class="o">|</span>
</span><span class='line'>  <span class="na">cl_image_tag(photo.path,</span><span class="err"> </span><span class="na">{</span><span class="err"> </span><span class="na">size</span><span class="o">:</span> <span class="s1">&#39;</span><span class="s2">50x50&#39;</span><span class="o">,</span> <span class="no">crop</span><span class="o">:</span> <span class="o">:</span><span class="n">fit</span><span class="err">}</span><span class="p">)</span>
</span><span class='line'><span class="nt">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cloudinary offers all sort of features like face detection, various sorts of cropping, sprite generation, and much more.  Check out the docs <a href="http://cloudinary.com/documentation/image_transformations#format_conversion">here</a></p>

<p>Hat tip to <a href="http://zogovic.com/">Milovan Zogovic</a> for the top-notch work!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Choice code of recent days]]></title>
    <link href="http://beaugaines.github.com/choice-code-of-recent-days/"/>
    <updated>2013-05-09T14:21:00-04:00</updated>
    <id>http://beaugaines.github.com/choice-code-of-recent-days</id>
    <content type="html"><![CDATA[<h4>I&#8217;ve been busy!</h4>

<p>Never manage to post here as much as I&#8217;d like.  That, and improving the styling of this site, are both medium-high on my to-do list.  But so far they have been usurped by the tasks at hand.</p>

<p>Most of free my time lately has been spent working on the EdX Python/Intro to Comp. Sci class, as well as a <em>Mongo for Devs</em> class offered online by 10gen.  They&#8217;ve both been challenging but fun and I&#8217;ve learned a ton.<!-- more -->  I wanted to post some of nicer bits of code I&#8217;ve come up with and so here they are:</p>

<p>First this hideously lovely regex, from an exercise in <a href="http://www.diveintopython.com">Dive Into Python</a>, but I like regex so much I came up with it on my own:</p>

<figure class='code'><figcaption><span>hideous-regex  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">hideousRegex</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">                   # don&#39;t match beginning of string, number can start anywhere</span>
</span><span class='line'><span class="s">\(?                # match a possible opening bracket for area code </span>
</span><span class='line'><span class="s">(\d{3})            # area code at beginning of string</span>
</span><span class='line'><span class="s">\)?                # match a possible closing bracket</span>
</span><span class='line'><span class="s">\D*                # one or more &#39;non-word&#39; character - e.g. a hyphen, a space</span>
</span><span class='line'><span class="s">(\d{3})            # trunk of number - 3 digits</span>
</span><span class='line'><span class="s">\D*                # one or more &#39;non-word&#39; chars</span>
</span><span class='line'><span class="s">(\d{4})            # last 4 digits</span>
</span><span class='line'><span class="s">\D*                # more non-words</span>
</span><span class='line'><span class="s">(\d*)?             # maybe an extension of one or more digits</span>
</span><span class='line'><span class="s">$</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also got pretty excited about this recursive range function I came up with for the <em>MIT/EdX</em> class:</p>

<figure class='code'><figcaption><span>recursively-ranging   </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">recurRange</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">step</span><span class="p">,</span><span class="n">storage</span><span class="o">=</span><span class="p">[])</span>
</span><span class='line'>    <span class="n">storage</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">y</span> <span class="o">-</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">storage</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">recurRange</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">step</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">step</span><span class="p">,</span><span class="n">storage</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>RECURSION!  I read somewhere recently that for most any application it is vastly less efficient than an iterative loop.  But it&#8217;s hard not to love the elegance of it.  I&#8217;m smitten.</p>

<p>Also had some fun with a blog scraping script I wrote for a project a couple weeks back:</p>

<figure class='code'><figcaption><span>blog-scrapr  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;sequel&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">BLOG_1</span> <span class="o">=</span> <span class="s1">&#39;http://widgetmasters.blogspot.com&#39;</span>
</span><span class='line'><span class="n">freq</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">page</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="no">BLOG_1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">skip_words</span> <span class="o">=</span> <span class="sx">%w(i and of to the a in my her with as on is his like for she that</span>
</span><span class='line'><span class="sx">at an it from - am this our out we are he be was but me their up into one</span>
</span><span class='line'><span class="sx">back through not . were then have by down each around just they its which</span>
</span><span class='line'><span class="sx">all it&#39;s over or little you there what against what can had so me been and but</span>
</span><span class='line'><span class="sx">don&#39;t let feet side trying get do then than if no how has about only we long more</span>
</span><span class='line'><span class="sx">arm left weight will my few past makes straight know head them where towards</span>
</span><span class='line'><span class="sx">take coud him still tell many two one if your here onto </span>
</span><span class='line'><span class="sx">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">page</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;div.entry-content p&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>  <span class="n">words</span> <span class="o">=</span> <span class="nb">p</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">split</span>
</span><span class='line'>  <span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/(?=\s)(\d|\W)/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">freq</span><span class="o">[</span><span class="n">word</span><span class="o">.</span><span class="n">downcase</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">sorted</span> <span class="o">=</span> <span class="n">freq</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="o">-</span><span class="n">v</span> <span class="p">}</span><span class="o">.</span><span class="n">last</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">skip_words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>  <span class="n">sorted</span><span class="o">.</span><span class="n">delete_if</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">useless_words</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># put it into sqlite - in memory, using the cool sequel gem</span>
</span><span class='line'>
</span><span class='line'><span class="no">DB</span> <span class="o">=</span> <span class="no">Sequel</span><span class="o">.</span><span class="n">sqlite</span>
</span><span class='line'>
</span><span class='line'><span class="no">DB</span><span class="o">.</span><span class="n">create_table</span> <span class="ss">:words</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">primary_key</span> <span class="ss">:id</span>
</span><span class='line'>  <span class="nb">String</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="nb">Integer</span> <span class="ss">:count</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="no">DB</span><span class="o">[</span><span class="ss">:words</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">sorted</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="o">|</span> <span class="n">words</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="n">key</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="n">value</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># run some queries on the DB</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">w</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">w</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally - a Javascript hack to slice up a pseudo-html paragraph and return html:</p>

<figure class='code'><figcaption><span>jscript-switch-and-interpolation  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="s2">&quot;%% Language\n\n\</span>
</span><span class='line'><span class="s2">\</span>
</span><span class='line'><span class="s2">When a programming language is created, it is given syntax and\</span>
</span><span class='line'><span class="s2">semantics. The syntax describes the form of the program, the semantics\</span>
</span><span class='line'><span class="s2">describe the function. When the syntax is beautiful and the semantics\</span>
</span><span class='line'><span class="s2">are clear, the program will be like a stately tree. When the syntax is\</span>
</span><span class='line'><span class="s2">clumsy and the semantics confusing, the program will be like a bramble\</span>
</span><span class='line'><span class="s2">bush.\</span>
</span><span class='line'><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">processParagraph</span><span class="p">(</span><span class="nx">paragraph</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">sprintf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sprintf-js&#39;</span><span class="p">).</span><span class="nx">sprintf</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">vsprintf</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sprintf-js&#39;</span><span class="p">).</span><span class="nx">vsprintf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">sections</span> <span class="o">=</span> <span class="nx">paragraph</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;\n\n&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">headers</span> <span class="o">=</span> <span class="nx">sections</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">headerTag</span> <span class="o">=</span> <span class="nx">headers</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="s1">&#39;&lt;p&gt;&#39;</span> <span class="o">+</span> <span class="nx">sections</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;&lt;/p&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">switch</span><span class="p">(</span><span class="nx">headerTag</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>    <span class="nx">headerTag</span> <span class="o">=</span> <span class="s1">&#39;h1&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>    <span class="nx">headerTag</span> <span class="o">=</span> <span class="s1">&#39;h2&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>    <span class="nx">headerTag</span> <span class="o">=</span> <span class="s1">&#39;h3&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>    <span class="nx">headerTag</span> <span class="o">=</span> <span class="s1">&#39;h4&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>    <span class="nx">headerTag</span> <span class="o">=</span> <span class="s1">&#39;h5&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">sprintf</span><span class="p">(</span><span class="s1">&#39;&lt;%1$s&gt;&#39;</span><span class="p">,</span> <span class="nx">headerTag</span><span class="p">)</span> <span class="o">+</span> <span class="nx">headers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nx">sprintf</span><span class="p">(</span><span class="s1">&#39;&lt;/%1$s&gt;&#39;</span><span class="p">,</span> <span class="nx">headerTag</span><span class="p">)</span> <span class="o">+</span> <span class="nx">body</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&#8217;s it for this edition of <em>Charlie&#8217;s Choice Code</em>.</p>

<p>IN OTHER NEWS - I&#8217;ve been busy recently writing a test suite for <a href="http://nfoshare.com">Nfoshare.com</a>.  I love writing tests and it&#8217;s been interesting to work through their code and test out the classes.  I&#8217;m nearly done with the unit tests and will do an integration test suite as well.  I haven&#8217;t done much test writing recently but I hope to do more of it in coming days.  It&#8217;s a satisfying way to code&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the charms of amortized cost analysis]]></title>
    <link href="http://beaugaines.github.com/the-charms-of-amortized-cost-analysis/"/>
    <updated>2013-03-15T21:21:00-04:00</updated>
    <id>http://beaugaines.github.com/the-charms-of-amortized-cost-analysis</id>
    <content type="html"><![CDATA[<h3>Ugh.</h3>

<p>I have not posted here in far too long - which I&#8217;m not happy about - although I feel like I read this on someone&#8217;s blog nearly every day, so at least I&#8217;m not alone.  I&#8217;ve been super busy of late:  working on my learning objectives for the year, upgrading my Javascript skills, and upgrading my coding skills full stop - thanks to the <em>EdX 6.00</em> course from MIT. <!-- more -->  It&#8217;s nominally <em>Intro to Comp. Sci</em>, so some of it is review, but I&#8217;ve never encountered a better taught course anywhere I&#8217;ve studied and it&#8217;s really solidified my grounding in the topic.  I have some more work to do before I fully grasp amortized cost analysis, but Big O notation is fairly well-lodged in the noggin I think.  Most important thing:  I&#8217;m really enjoying the study and the better I get at programming the happier I am doing it.</p>

<p>Apart from the MIT course, here are my immediate goals for the next couple months:</p>

<ul>
<li>Eloquent Javascript (half way through!)</li>
<li>Manning SPA book</li>
<li>Rebuilding Rails</li>
<li>CoffeeScript in Action</li>
<li>MongoDB in Action</li>
</ul>


<p>In addition I have a new Rails project I want to work on - a tool for private tutors and teachers.  So many projects, so little time&#8230;</p>

<p>ALSO&#8230;have some new titles to put on the &#8216;To Do&#8217; list&#8230;including these:</p>

<p><em>Object Thinking</em>, David West; <em>Elemental Design Patterns</em>, JM Smith; <em>Domain Driven Design</em>, Eric Evans; <em>Refactoring</em>, Fowler et al, <em>Exploring Everyday Things with R and Ruby</em>, SS Chang, and Brian Ward&#8217;s book on Unix and Superusers, which I own, and the contents of which I should already know, but I&#8217;m going to read it anyway.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[goals for the new year]]></title>
    <link href="http://beaugaines.github.com/goals-for-the-new-year/"/>
    <updated>2013-01-01T19:02:00-05:00</updated>
    <id>http://beaugaines.github.com/goals-for-the-new-year</id>
    <content type="html"><![CDATA[<p>Whew!  The last couple months have been so busy, I&#8217;ve had no time to write here at all.  It&#8217;s been a good period in terms of pushing ahead with my goals.  I finished working my way through <em>The Well-Grounded Rubyist</em>, and am now half-way through <em>The Pickaxe</em>, which I&#8217;m really enjoying.<!--more -->  I&#8217;m also half way through <a href="http://rebuilding-rails.com/">Rebuilding Rails</a>, which I&#8217;m also enjoying.  And I&#8217;m also reading <a href="https://leanpub.com/thes3cookbook">The S3 Cookbook</a> - which is also very interesting!</p>

<p>I&#8217;m in the midst of polishing up and deploying my Stashboard clone - and will post the link to that soon.  I learned a lot on that project.  A couple other Rails projects are nearing fruition as well.</p>

<p>My goal for this year is really to just continue my current trajectory and get more and broader and deeper knowledge of every part of the Rails stack.  But I plan on redoubling my efforts on the Javascript front.  I have a backlog of books to read:  <em>Node in Action</em>, <em>Master Time and Space with Javascript</em>, <em>Extending jQuery</em>, <em>CoffeeScript in Action</em>, and <em>Secrets of the Javascript Ninja</em> &#8211; among others!</p>

<p>I also need to read <em>Redis in Action</em> and I want to build an app with MongoDB.  I&#8217;m also reviewing a manuscript for Manning - <a href="http://www.manning.com/obe/">PostGIS in Action</a>.  I&#8217;m always glad to increase my Postgres skills so that should be interesting.</p>

<p>So&#8230;I have my work cut out for me.  Luckily I enjoy this stuff.  I buy new programming books with unvarnished glee.  I just wish I had more time to work through them all.  They&#8217;ll keep coming this year - the tide of books is relentless - but I will soldier on - and much will be learned!</p>

<p>It will be a good year of coding I think&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My love affair with regexps]]></title>
    <link href="http://beaugaines.github.com/my-love-affair-with-regexps/"/>
    <updated>2012-10-23T17:07:00-04:00</updated>
    <id>http://beaugaines.github.com/my-love-affair-with-regexps</id>
    <content type="html"><![CDATA[<p>I haven&#8217;t posted here in ages.  I&#8217;ve been busy polishing up my first real app - a Rails clone of Stashboard.  I&#8217;m pretty happy with the results.  I managed to get a version with responsive tables working.  Just some styling tweaks and some sort of admin dashboard remain to be done.  And deployment.  I&#8217;m hoping for the end of next week at the latest.</p>

<!-- more -->


<p>Have also been making good progress through <em>The Well-Grounded Rubyist</em>.  I found it a bit dry at first but it&#8217;s grown on me a lot.  Just finished the chapter on <code>Enumerable</code> - very interesting - and am now working through the <code>regexp</code> chapter.  Heaven!  I&#8217;ve always loved regexps.  I don&#8217;t understand why people find them so distasteful.  In his preface to the chapter David Black says some people believe them to be &#8216;counterproductive&#8217;.  I don&#8217;t understand what he means by that&#8230;but I&#8217;ll look into it.</p>

<p>Anyway&#8230;unproductive or not, I&#8217;m really enjoying it.  I&#8217;m looking forward to finishing the rest of the book and moving on to <em>Metaprogramming in Ruby</em>.  Then I&#8217;m gonna dig into Javascript.  I have a lot to learn on that front.  I wish it were more likeable as a language.  But it&#8217;s indispensible it seems&#8230;so I&#8217;ll take the plunge.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime Text Voodoo]]></title>
    <link href="http://beaugaines.github.com/sublime-text-voodoo/"/>
    <updated>2012-09-26T10:57:00-04:00</updated>
    <id>http://beaugaines.github.com/sublime-text-voodoo</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been using <em>Sublime Text</em> for about a year now.  It&#8217;s probably the best engineered tool I&#8217;ve ever used to do anything - period.  Just recently though I&#8217;ve been starting to use some of its more useful features.  I&#8217;m going to document them here for easy reference.  This is on a Linux installation and some of these are custom commands:</p>

<!-- more -->


<h3>Keystrokes</h3>

<ul>
<li><code>super+d</code>:  select word/multiple select</li>
<li><code>shift+right-mouse-button+ drag</code>: column select</li>
<li><code>ctrl+shift+l</code>: multiple selections per line</li>
<li><code>super+r</code>: go to symbol</li>
<li><code>ctrl+m</code>: jump to closing parens</li>
<li><code>ctrl+shift+m</code>: select all contents of the current parentheses</li>
<li><code>ctrl+k+k</code>: delete from cursor till end of line</li>
<li><code>ctrl+k+backspace</code>: delete from cursor till beginning of line</li>
<li><code>ctrl+shift+/</code>: block comment current selection</li>
<li><code>ctrl+y</code>: repeat last keyboard shortcut</li>
<li><code>ctrl+KU</code>: transform to uppercase</li>
<li><code>ctrl+KL</code>: transform to lowercase</li>
<li>hit <code>ctrl+p</code> and then immediately type in a symbol to go straight to a class or method in the file</li>
<li>if you select a line of text and hit open parentheses it will add the closing parenthesis</li>
<li><code>ciw</code>: cut internal word (Vintage mode)</li>
</ul>


<h3>Snippets</h3>

<h4>Zen Coding</h4>

<ul>
<li><code>ul&gt;li*4&gt;a[href='#']{Important Link}</code>  #=></li>
</ul>


<figure class='code'><figcaption><span>html-zen-code-block  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Important Link<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Important Link<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Important Link<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Important Link<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>can wrap in parentheses to distinguish between sections:
<code>.container&gt;(.header&gt;header&gt;h1{My Website})+.main+.footer&gt;footer</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[more ruby titbits]]></title>
    <link href="http://beaugaines.github.com/more-ruby-titbits/"/>
    <updated>2012-09-25T11:32:00-04:00</updated>
    <id>http://beaugaines.github.com/more-ruby-titbits</id>
    <content type="html"><![CDATA[<p>I&#8217;ve decided to press ahead and finish <em>The Well Grounded Rubyist</em>.  I don&#8217;t find it easy reading somehow&#8230;too much blah blah blah and not enough doing.  But I&#8217;ll plow through it and then spend a couple days plundering the Ruby APIs.  Some selected titbits from said plowing and plundering:</p>

<!-- more -->


<h4>Default objects and scope:</h4>

<ul>
<li>self inside a singleton method is the object whose singleton method it is.  For ex., a class method can be defined thus:</li>
</ul>


<figure class='code'><figcaption><span>singleton-class-method  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bob</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">x</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;This is Bob&#39;s class method&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;self: </span><span class="si">#{</span><span class="nb">self</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; This is Bob&#39;s class method</span>
</span><span class='line'><span class="c1"># =&gt; self:  Bob</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>note that where the receiver of a method&#8217;s call is self, the receiver can be omitted and will be called implicitly, e.g. <code>self.babble</code> is the same as plain old <code>babble</code>.  This is most common when one method calls another:</li>
</ul>


<figure class='code'><figcaption><span>dotless-method-call  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Bob</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">is</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;This is method &#39;is&#39;&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">your_uncle</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Method your_uncle here, about to call is with no dot.&quot;</span>
</span><span class='line'>    <span class="n">is</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bob</span> <span class="o">=</span> <span class="no">Bob</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">bob</span><span class="o">.</span><span class="n">your_uncle</span>
</span><span class='line'><span class="c1"># =&gt; Method your_uncle here, about to call is with no dot.</span>
</span><span class='line'><span class="c1"># =&gt; This is method &#39;is&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>every instance variable belongs to whatever object is <code>self</code> at that current point of execution.</li>
<li><em>scope</em> refers to the visibility of <em>identifiers</em> - particularly variables and constants</li>
<li>note that you can start a new scope without self changing - but sometimes they can change together</li>
<li>some common global variables:  <code>$0</code> - the name of the startup file for the currently running program; <code>$:</code> - a list of the directories Ruby searches when you load an external file; <code>$$</code> - contains the process id of the current Ruby process</li>
<li>good practice to avoid global variables as much as possible - to avoid namespace contamination and design things such that data and actions are encapsulated in objects</li>
<li><em>local scope</em> is the foundation of every program; at any moment, your program is in a particular local scope. Every top level has its own local scope; every class or module definition has its own local scope; and every call to a method generates a new local scope, with all local vars set to and undefined state</li>
<li>like a slash at the beginning of a pathname, a <code>::</code> in front of a constant means &#8216;start the search for this at the top level&#8217;</li>
<li>class variables are written as <code>@@bob</code> and provide a storage mechanism that is shared between a class an instances of that class, but is not visible to any other objects.  This differs from Constants and Globals in that they are visible throughout the program.</li>
<li>note that class variables are actually <em>class hierarchy variables</em>.  Classes and their descendents share the same class variables; so if you set one in a child class, it is shared all the way up the hierarchy</li>
</ul>


<h4>On private, public, and protected:</h4>

<ul>
<li><em>private</em> is a method and takes as an argument a list of the methods you want private; alternately you can define a bunch of instance methods below the call to private</li>
<li>private means that a method <em>can&#8217;t be called with an explicit receiver</em> - e.g. <code>b = Bob.new</code> would fail b/c you&#8217;ve specified the receiver <code>b</code></li>
<li>lacking an explicit receiver, private methods adopt the implicit receiver of <code>self</code></li>
<li>difference between singleton and private methods:  singleton methods belong to only one object, but are not private by default; private methods can be shared by many objects, but may only be called when the object calling them is <code>self</code> and has access to said method</li>
<li>note that the <em>no explicit receiver</em> stipulation is ignored when it comes to <em>setter</em> methods, as these methods require an explicit reciever</li>
<li><em>protected</em> methods can be called on a given object x provided that self is an instance of the same class as x - or of an ancestor or descendent of x&#8217;s class</li>
<li>what that adds up to is this:  protected is usually used when you want an instance of a class to do something with another instance of the same class</li>
<li>note also that subclasses inherit method access rules from their superclass, although these can be overriden</li>
</ul>


<h4>Writing and using top-level methods</h4>

<ul>
<li>sometimes you&#8217;ll want to forego writing classes and modules and just whack together a script; when you do you&#8217;re coding in the context of the top-level default object - which is <em>main</em></li>
<li>methods defined at the top level are not instance methods of any class or module but instead are stored as a private instance method of the <code>Object</code> class</li>
<li>for this reason, methods defined at top level can only be called on self - not an an explicit receiver</li>
<li>many many build in top-level methods - e.g. <code>print</code> or <code>puts</code> - which are private methods of <em>Kernel</em>.  Here is a full list of Ruby&#8217;s top-level Kernel methods:</li>
</ul>


<figure class='code'><figcaption><span>top-level-kernel-methods  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="ss">:Array</span><span class="p">,</span> <span class="ss">:Complex</span><span class="p">,</span> <span class="ss">:Float</span><span class="p">,</span> <span class="ss">:Integer</span><span class="p">,</span> <span class="ss">:Rational</span><span class="p">,</span> <span class="ss">:String</span><span class="p">,</span> <span class="ss">:__callee__</span><span class="p">,</span> <span class="ss">:__method__</span><span class="p">,</span> <span class="ss">:`</span><span class="p">,</span> <span class="ss">:abort</span><span class="p">,</span> <span class="ss">:at_exit</span><span class="p">,</span> <span class="ss">:autoload</span><span class="p">,</span> <span class="ss">:autoload?</span><span class="p">,</span> <span class="ss">:binding</span><span class="p">,</span> <span class="ss">:block_given?</span><span class="p">,</span> <span class="ss">:caller</span><span class="p">,</span> <span class="ss">:catch</span><span class="p">,</span> <span class="ss">:eval</span><span class="p">,</span> <span class="ss">:exec</span><span class="p">,</span> <span class="ss">:exit</span><span class="p">,</span> <span class="ss">:exit!</span><span class="p">,</span> <span class="ss">:fail</span><span class="p">,</span> <span class="ss">:fork</span><span class="p">,</span> <span class="ss">:format</span><span class="p">,</span> <span class="ss">:gem</span><span class="p">,</span> <span class="ss">:gem_original_require</span><span class="p">,</span> <span class="ss">:gets</span><span class="p">,</span> <span class="ss">:global_variables</span><span class="p">,</span> <span class="ss">:initialize_copy</span><span class="p">,</span> <span class="ss">:iterator?</span><span class="p">,</span> <span class="ss">:lambda</span><span class="p">,</span> <span class="ss">:load</span><span class="p">,</span> <span class="ss">:local_variables</span><span class="p">,</span> <span class="ss">:loop</span><span class="p">,</span> <span class="ss">:open</span><span class="p">,</span> <span class="ss">:p</span><span class="p">,</span> <span class="ss">:print</span><span class="p">,</span> <span class="ss">:printf</span><span class="p">,</span> <span class="ss">:proc</span><span class="p">,</span> <span class="ss">:putc</span><span class="p">,</span> <span class="ss">:puts</span><span class="p">,</span> <span class="ss">:raise</span><span class="p">,</span> <span class="ss">:rand</span><span class="p">,</span> <span class="ss">:readline</span><span class="p">,</span> <span class="ss">:readlines</span><span class="p">,</span> <span class="ss">:remove_instance_variable</span><span class="p">,</span> <span class="ss">:require</span><span class="p">,</span> <span class="ss">:require_relative</span><span class="p">,</span> <span class="ss">:select</span><span class="p">,</span> <span class="ss">:set_trace_func</span><span class="p">,</span> <span class="ss">:sleep</span><span class="p">,</span> <span class="ss">:spawn</span><span class="p">,</span> <span class="ss">:sprintf</span><span class="p">,</span> <span class="ss">:srand</span><span class="p">,</span> <span class="ss">:syscall</span><span class="p">,</span> <span class="ss">:system</span><span class="p">,</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:throw</span><span class="p">,</span> <span class="ss">:trace_var</span><span class="p">,</span> <span class="ss">:trap</span><span class="p">,</span> <span class="ss">:untrace_var</span><span class="p">,</span> <span class="ss">:warn</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Control Flow</h4>

<ul>
<li>you can negate conditions two ways: <code>if not "bob" == "uncle"</code> and <code>if !("bob" == "uncle")</code>.  Parentheses required in the latter; the <em>bang</em> binds more tightly than the <em>not</em></li>
<li>if there&#8217;s any ambiguity at all in your expression, always include parentheses</li>
<li>if you have an <code>else</code> clause, better to use <code>if</code> than <code>unless</code></li>
<li>local variables are initialized to nil at runtime <em>even if they are not ultimately used</em>.  This is not the case with instance and class variables</li>
<li>note that in <code>case/when</code> structures, the matches are evaluated using the <em>case equality</em> or &#8216;threequal&#8217; operator <code>===</code>.  For strings and any object that does not override it it is equivalent to <code>==</code> but it can be overridden in any class to define how your objects behave in a case statement</li>
<li>the <code>case</code> statement can be used with no test expression and followed by a sequence of <code>when</code> clauses; the first clause whose condition is true will bring home the bacon.  And since the statement evaluates to an object, you can do suchlike:</li>
</ul>


<figure class='code'><figcaption><span>puts-case-ex  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="k">case</span>
</span><span class='line'>  <span class="k">when</span> <span class="n">meal</span><span class="o">.</span><span class="n">breakfast</span> <span class="o">==</span> <span class="s1">&#39;Bacon&#39;</span>
</span><span class='line'>    <span class="s1">&#39;Good!&#39;</span>
</span><span class='line'>  <span class="k">when</span> <span class="n">meal</span><span class="o">.</span><span class="n">lunch</span> <span class="o">==</span> <span class="s1">&#39;Natto&#39;</span>
</span><span class='line'>    <span class="s1">&#39;Bad!&#39;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="s1">&#39;No food better than natto!&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Iteration</h4>

<ul>
<li>note that <code>yield</code> is not the same as returning from a method; yielding takes place while the method is still running.  Also note that the code block is not an argument but rather just part of the method call itself - i.e. part of the syntax</li>
<li>on blocks and scope:  blocks have access to the variables that already exist when they&#8217;re created - but variables used in <em>block parameters</em> are <em>not</em> the same as variables by the same name in local scope and the latter will not be changed by what happens <em>en bloqe</em>.</li>
</ul>


<h4>Exceptions</h4>

<ul>
<li>the beginning of a method definition provides an implicit begin/end context, so you can just put a <em>rescue</em> clause in the body of the method without an explicit <em>begin</em>.  However you can get more precise control by including an explicit <em>begin</em>; only what lies between <em>begin</em> and <em>rescue</em> will be governed by the clause</li>
<li>good practice to specify which exception you wish to capture - so you do not mask problems by rescuing excessively</li>
<li>you can assign the exception message to a variable thusly: <code>rescue =&gt; e</code>.  And that variable responds to messages; <code>backtrace</code> and <code>message</code> are especially useful</li>
<li>note the syntax <code>raise ArgumentError</code> looks as if a class is being raised, but in truth an instance of the exception class is being raised</li>
<li>you can re-raise an exception - for ex. if you want to log the exception but still have it treated as an exception; to do this you just call <code>raise</code> from within the rescue block</li>
<li>you can create your own exception classes by inheriting from <code>Exception</code> or one of its descendant classes</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[road map no. 4 - html+css]]></title>
    <link href="http://beaugaines.github.com/road-map-no-4-html-plus-css/"/>
    <updated>2012-09-19T17:40:00-04:00</updated>
    <id>http://beaugaines.github.com/road-map-no-4-html-plus-css</id>
    <content type="html"><![CDATA[<h4>HTML5 &amp; CSS3 &amp; SASS</h4>

<ul>
<li><del>CodeSchool HTML 5 course</del></li>
<li><del>Pragmatic _HTML5 and CSS3</del></li>
<li><del>Pragmatic _Rails Views</del></li>
<li><del>CodeSchool CSS course</del></li>
<li>SMACCS</li>
<li><del>CodeSchool SASS course</del></li>
<li>HardBoiled Web Dev</li>
<li>HTML5 in Action</li>
<li>Manning - Responsive Web</li>
<li>SASS and Compass in Action</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[road map no. 3 - javascript]]></title>
    <link href="http://beaugaines.github.com/road-map-no-3-javascript/"/>
    <updated>2012-09-19T17:40:00-04:00</updated>
    <id>http://beaugaines.github.com/road-map-no-3-javascript</id>
    <content type="html"><![CDATA[<ul>
<li><del>Sitepoint <em>Simply Javascript</em></del></li>
<li><del>CodeSchool CoffeeScript course</del></li>
<li><del>CodeSchool Node course</del></li>
<li><del>CodeSchool Jquery courses</del></li>
<li><del>CodeSchool Backbone course</del></li>
<li>Code Academy exercises - all of &#8216;em</li>
<li>Eloquent Javascript</li>
<li>Master Time And Space with Javascript</li>
<li>CoffeeScript in Action</li>
<li>NodeJS in Action (11/25/12 - <em>in progress!</em>)</li>
<li>Manning <em>Single Page Web Applications</em></li>
<li>Osmani, <em>Backbone Fundamentals</em></li>
<li>Thoughbot Backbone book</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[road map no. 2 - postgres]]></title>
    <link href="http://beaugaines.github.com/road-map-no-2-postgres/"/>
    <updated>2012-09-19T17:39:00-04:00</updated>
    <id>http://beaugaines.github.com/road-map-no-2-postgres</id>
    <content type="html"><![CDATA[<p>Straight from Thoughtbot&#8217;s map:</p>

<p>Read these sections of the <a href="http://www.postgresql.org/docs/9.0/static/index.html">Postgres manual</a></p>

<h4>Basics</h4>

<ul>
<li><del> 2.5. Querying a Table </del></li>
<li><del> 2.6. Joins Between Tables </del></li>
<li><del> 2.7. Aggregate Functions </del></li>
<li><del> 3.5. Window Functions </del></li>
</ul>


<h4>SQL Syntax</h4>

<ul>
<li><del>4.1. Lexical Structure</del></li>
<li><del>4.2. Value Expressions</del></li>
</ul>


<h4>Data Definition</h4>

<ul>
<li>5.1. Table Basics</li>
<li>5.2. Default Values</li>
<li>5.3. Constraints</li>
<li>5.5. Modifying Tables</li>
</ul>


<h4>Data Manipulation</h4>

<ul>
<li>6.1. Inserting Data</li>
<li>6.2. Updating Data</li>
<li>6.3. Deleting Data</li>
</ul>


<h4>Queries</h4>

<ul>
<li>7.1. overview</li>
<li>7.2. table expressions</li>
<li>7.3. select lists</li>
<li>7.4. combining queries</li>
<li>7.5. sorting rows</li>
<li>7.6. limit and offset</li>
<li>7.7. values lists</li>
<li>7.8. WITH Queries (Common Table Expressions)</li>
</ul>


<h4>Functions and Operators</h4>

<ul>
<li>9.1. Logical Operators</li>
<li>9.2. Comparison Operators</li>
<li>9.7.1. LIKE</li>
<li>9.20.Subquery Expressions</li>
</ul>


<h4>Indexes</h4>

<ul>
<li>11.1. Introduction</li>
<li>11.5. Combining Multiple Indexes</li>
</ul>


<p>I. SQL Commands</p>

<figure class='code'><figcaption><span>sql-commands  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="p">[</span> <span class="n">CONCURRENTLY</span> <span class="p">]</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span>
</span><span class='line'><span class="k">DELETE</span>
</span><span class='line'><span class="k">INSERT</span>
</span><span class='line'><span class="k">SELECT</span>
</span><span class='line'><span class="k">UPDATE</span>
</span></code></pre></td></tr></table></div></figure>


<p>Read the following sections of the SQL Cookbook:</p>

<p>Appendix A: Window Function Refresher
Any recipes that interest you</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Road Map No. 1 - Ruby and Rails]]></title>
    <link href="http://beaugaines.github.com/road-map-no-1-ruby/"/>
    <updated>2012-09-14T14:25:00-04:00</updated>
    <id>http://beaugaines.github.com/road-map-no-1-ruby</id>
    <content type="html"><![CDATA[<p>Not yet in strict order, here&#8217;s my list:</p>

<ul>
<li><del> finish <em>The Well-Grounded Rubyist</em> <em>(update: on page 335)</em> </del> <em><em>FIN!</em></em></li>
<li><del>finish <em>Ruby Koans</em></del></li>
<li>Practical Object-Oriented Design in Ruby (11/25/12 - <em>in progress!</em>)</li>
<li>go through the APIs for Ruby <strong>Array, Hashes, Strings, and Files</strong>.  Learn &#8216;em by heart</li>
<li>read chaps. 23 and 34 of <em>The Pickaxe</em> (11/25/12 - <em>currently working through the whole hog instead of just the two chaps</em>) <em><em>FIN!</em></em></li>
<li>read <em>Practical Projects in Ruby</em></li>
<li>read <em>Metaprogramming in Ruby</em></li>
<li>Avdi Grimm&#8217;s <em>Objects on Rails</em></li>
<li><em>Rebuilding Rails</em></li>
<li><del>Rails 3 in Action</del></li>
<li><del>Every Day Rails Testing</del></li>
<li><del>The RSpec Book</del> <em><em>FIN</em></em></li>
<li><del>CodeSchool <em>Testing with RSpec</em></del></li>
<li><del>CodeSchool <em>Rails Best Practices</em></del></li>
<li><del>CodeSchool <em>Ruby Bits 1 &amp; 2</em></del></li>
<li><del>Rails Views</del></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My road map]]></title>
    <link href="http://beaugaines.github.com/my-road-map/"/>
    <updated>2012-09-14T14:25:00-04:00</updated>
    <id>http://beaugaines.github.com/my-road-map</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been navigating my way through the task of teaching myself how to code in part thanks to these <a href="https://github.com/thoughtbot/trail-map">trail maps</a> that Thoughtbot has assembled.  I used them as a base and cooked up my own map.  I&#8217;m going to call it a road map because I don&#8217;t ski or hike really.  And roads take you places while trails do not usually have a destination.</p>

<p>So here, first of all, is my <a href="blog/2012/09/14/road-map-no-1-ruby">Ruby road map</a>.  I&#8217;m going to add items to the list when I encounter them, and cross off what I&#8217;ve achieved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code titbits no. 1]]></title>
    <link href="http://beaugaines.github.com/code-titbits-no-1/"/>
    <updated>2012-09-12T11:44:00-04:00</updated>
    <id>http://beaugaines.github.com/code-titbits-no-1</id>
    <content type="html"><![CDATA[<p>In no particular order, here are the things I learned this week about:</p>

<h3>Github pages</h3>

<p>Learned how to set up the bones of this site and deploy to Github via <a href="http://www.tomordonez.com/blog/2012/06/04/creating-a-github-blog-using-octopress/">Tom Ordonez&#8217; fine instructions</a></p>

<!-- more -->


<h3>Cucumber</h3>

<p>Learned this from <a href="http://coryschires.com">Corey Schires&#8217; blog</a>:</p>

<ul>
<li>consolidate positive and negative assertions in step definitions:</li>
</ul>


<figure class='code'><figcaption><span>negative assertions in Cuke  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Then </span><span class="nf">/^I should( not)? see the following columns: &quot;</span><span class="s">([^</span><span class="nf">&quot;]*)&quot;</span><span class="s">$/ do |negate, columns|</span>
</span><span class='line'><span class="s">  within(&#39;table thead tr&#39;) do</span>
</span><span class='line'><span class="s">    columns.split(&#39;, &#39;).each do |column|</span>
</span><span class='line'><span class="s">      negate ? page.should_not(have_content(column)) : page.should(have_content(column))</span>
</span><span class='line'><span class="s">    end</span>
</span><span class='line'><span class="s">  end</span>
</span><span class='line'><span class="s">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The optional <code>( not)?</code> gets passed into the step as <code>negate</code> var for conditional assertion goodness.</p>

<p>Also learned (true titbits here):</p>

<ul>
<li>to get the convenience methods in Cucumber features, create a file <code>features/support/factory_girl.rb</code> with the contents <code>World(FactoryGirl::Syntax::Methods)</code></li>
<li>to be <em>fair</em> to both Rspec and Cucumber, it&#8217;s good to put factories in their own <code>factories/..</code> folder at your application root.  If you do this you also need to put this in a file at <code>features/support/factories.rb</code>:</li>
</ul>


<figure class='code'><figcaption><span>factories-support-fil  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span> <span class="o">+</span> <span class="s2">&quot;factories/*.rb&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">require</span> <span class="n">file</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Gimp</h3>

<p>I wanted to create a transparent png from a black and white image.  This is pretty easy in gimp:</p>

<ol>
<li>add an alpha layer to the image ( Layer > Transparency > Add Alpha Layer )</li>
<li>make sure the image is in RGB mode ( Image > Mode > RGB )</li>
<li>change the background to alpha ( Colors > Color to Alpha)</li>
</ol>


<p>That second bit is important; if the image is greyscale the Color to Alpha option will be greyed out&#8230;</p>

<h3>Ruby</h3>

<p>I&#8217;m working my way through the Ruby section of <a href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks">Seven Languages in Seven Weeks</a>.  This book has been great fun.  I like how broad a scope it takes:  from the simplest features of the language on Day 1 to fairly sophisticated subjects on Day 3.</p>

<p>Here are my answers for the Day 2 exercises:</p>

<h4>1. Find out how to access files with and without a code block.  What is the benefit of the code block?</h4>

<figure class='code'><figcaption><span>File handling in a block  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;guacamole.txt&quot;</span><span class="p">,</span> <span class="s1">&#39;w+&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">file</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;Holy guacamole&quot;</span>
</span><span class='line'><span class="n">file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># accessing the file in the blocky mode:</span>
</span><span class='line'>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;guacamole.txt&quot;</span><span class="p">,</span> <span class="s1">&#39;w+&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">line</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One line versus three, and at the end of the block the file closes automatically. Tidy and elegant.</p>

<h4>2. How to translate a hash into an array?  And can the reverse be done?</h4>

<p>A trivial task using Ruby&#8217;s <code>to_a</code> method:</p>

<figure class='code'><figcaption><span>hash-to-array-conversion  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">:bob</span> <span class="o">=&gt;</span> <span class="s2">&quot;uncle&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the reverse:</p>

<figure class='code'><figcaption><span>array-to-hash-conversion  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="n">w</span><span class="sx">%(bob is your uncle)</span>
</span><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[*</span><span class="n">array</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>3. Can you iterate through a hash?</h4>

<p>Yes, thusly:</p>

<figure class='code'><figcaption><span>hash-iteration  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:bob</span> <span class="o">=&gt;</span> <span class="s2">&quot;uncle&quot;</span><span class="p">,</span> <span class="ss">:belinda</span> <span class="o">=&gt;</span> <span class="s2">&quot;aunt&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nb">hash</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2"> - </span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>4. Ruby arrays can be used as stacks.  What other data structures do arrays support?</h4>

<p>I tried to find a comprehensive list of array data structures but this is all I came up with.  I&#8217;ll add more when I find em.</p>

<figure class='code'><figcaption><span>array-data-structures  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Queues/Dequeues</span>
</span><span class='line'>
</span><span class='line'><span class="n">queue</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">queue</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">&quot;delightful&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">&quot;queue&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">queue</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="s2">&quot;1&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">queue</span><span class="o">.</span><span class="n">pop</span>  <span class="c1"># =&gt; &quot;queue&quot;</span>
</span><span class='line'><span class="n">queue</span><span class="o">.</span><span class="n">shift</span> <span class="c1"># =&gt; &quot;1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Lists</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="sx">%w(a bag of tricks)</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;special&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span> <span class="o">==</span> <span class="s2">&quot;bag&quot;</span> <span class="p">?</span> <span class="s2">&quot;hag&quot;</span> <span class="p">:</span> <span class="n">e</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Bag/Set</span>
</span><span class='line'>
</span><span class='line'><span class="n">bag</span> <span class="o">=</span> <span class="sx">%w(ceci n&#39;est pas une emeraude)</span>
</span><span class='line'><span class="n">bag2</span> <span class="o">=</span> <span class="sx">%w(non pas du tout une emeraude)</span>
</span><span class='line'><span class="n">set</span> <span class="o">=</span> <span class="n">bag</span> <span class="o">|</span> <span class="n">bag2</span> <span class="c1"># =&gt; [&quot;ceci&quot;, &quot;n&#39;est&quot;, &quot;pas&quot;, &quot;une&quot;,</span>
</span><span class='line'>                 <span class="c1">#     &quot;emeraude&quot;, &quot;non&quot;, &quot;du&quot;, &quot;tout&quot;]</span>
</span><span class='line'><span class="c1"># Matrices</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">]]</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">transpose</span> <span class="c1"># =&gt; [[1,4,7], [2,5,8], [3,6,9]]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5.  Print the content of an array of sixteen numbers, four numbers at a time, using just each.  Then do the same with <code>each_slice</code> in Enumerable.</h4>

<p>I couldn&#8217;t find an <code>each</code> implementation I liked so I came up with this.</p>

<figure class='code'><figcaption><span>array-slice-n-dice  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[*</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">16</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">p</span> <span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">shift</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># and the same done with `each_slice`:</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">each_slice</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">slice</span><span class="o">|</span> <span class="nb">p</span> <span class="n">slice</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>6.  Write a simple grep that will print the lines of a file having any occurrences of a phrase anywhere in that line.  Include line numbers if you like.</h4>

<figure class='code'><figcaption><span>simple-grep  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">simple_grep</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="n">regex</span> <span class="o">=</span> <span class="sr">%r{pattern}</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">foreach</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span><span class="o">.</span><span class="n">with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="p">,</span> <span class="n">line_num</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">line_num</span> <span class="o">-</span> <span class="n">line</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">regex</span> <span class="o">=~</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
